# 2025-02-02





## Objective

Migrate the data flow from the wombat-data-framework (defined in src/WombatDataFrameworkSchema.ts) to individual Jotai atoms in the `src/atoms` directory. Each node from the existing framework will become its own asynchronous atom.

## Step-by-Step Plan

1. **Log File Input Atom**
   - Create `src/atoms/logFileInputAtom.ts`.
   - Define an interface for the atom's output (e.g., list of File objects) and create an atom that holds the user's log files.

2. **Log File Loader Atom**
   - Create `src/atoms/logFileLoaderAtom.ts`.
   - This atom will depend on the log file input atom and use `readFileAsync` (from the existing library) to asynchronously load file contents.
   - Define the output interface (e.g., fileName, fileModified, fileContent).

3. **Log File Parser Atom**
   - Create `src/atoms/logFileParserAtom.ts`.
   - This atom will depend on the loader atom and use the `parseFile` function to parse the file content.
   - Compute additional fields like `matchId` (using `stringHash`) and output an array of parsed file objects with properties such as fileName, matchId, logs, and fileModified.

4. **Event Extraction Atoms**
   - For each event extractor node (e.g., match_extractor, match_end_extractor, objective_captured_extractor, etc.), create a separate atom file in `src/atoms` (e.g., `matchExtractorAtom.ts`, `matchEndExtractorAtom.ts`, etc.).
   - In each file, define the output interface that matches the corresponding schema (e.g., for match start events: matchId, type, matchTime, mapName, mapType, team names).
   - Implement the atom as an async value that derives its data from the log file parser atom, filtering and transforming data based on the event "specName".

5. **Other Node Atoms**
   - Similarly, create atoms for the remaining nodes such as payload_progress_extractor, player_stat_extractor, kill_extractor, damage_extractor, healing_extractor, etc.
   - Each atom will follow the same pattern: define an output interface and an async atom that transforms the upstream atom's data.

6. **Aggregation and Function Node Atoms**
   - Create atoms for more complex nodes which combine data from multiple upstream atoms, such as `teamUltimateAdvantageAtom` and `teamAliveAdvantageAtom`.
   - Use the respective functions (like `processTeamAdvantageEvents`) from the original code to compute the aggregated data.

7. **General Guidelines**
   - All new atom files will reside in `src/atoms` and be named in camelCase (e.g., logFileInputAtom.ts, matchExtractorAtom.ts, etc.).
   - Each file will start with an output interface definition for clarity and strong typing.
   - All atoms involving asynchronous computations will be implemented as async atoms (using Jotai's capability to handle async atoms).
   - Review and test each atom individually before integrating them in components.

8. **Final Testing**
   - After creating these atoms, integrate them into a UI component to trigger and inspect their outputs.
   - Finally, run `npm run build` to ensure that the migration does not introduce any type errors or issues.
