# .cursorrules

Project Overview
- Scrimsight is a web app for analyzing data from Overwatch Scrims. It is built with React, Typescript, and Material-UI. 
- The project is organized into several main folders:
  - `src/components`: Reusable React components
  - `src/atoms`: State management using Jotai
  - `src/pages`: Page components
  - `src/lib`: Utility functions and types

App Structure

- The app is a single page app with a sidebar.
- The sidebar has links to the different pages.
- The main content area is where the page content is displayed.
- Pages



Components & Naming

- Name in PascalCase under `src/components/`.
- Keep them small, typed with interfaces.
- Prioritize readability over brevity.
- Components should have very limited logic, prefer to use atoms and jotai to manage state.
- Components should take as few props as possible, and use atoms to get other data they need that is not passed in props.
- Almost all logic should be in atoms, not in components. Limit components to only the logic needed to render the component, for example, a component that displays a list of items should not have logic for sorting or filtering the list.

Data

- Manage data with Jotai.
- Each atom has its own file in `src/atoms`, in camelCase.
- Subfolder: `/metrics` for atoms using the Metric interface, `/files` for dealing with uploads and parsing files, `/event_extractors` for parsing events from files, `/derived_events` for derived events from the event extractors or other atoms.
- Almost all atoms are async.
- Each atom file has an output interface defined at the top of the file.
- Use highly readable and logical code to implement atoms, don't be afraid to add comments.
- Do the processing directly, don't use alasql or any other library to process data.
- When using an atom, remember to import its type instead of declaring a new interface.

Below is a summary of the pages and an enhanced set of guidelines for Data Display and Visualization.

---

### Pages

| Page name | Description                                                                                             | Page sections                                                                                     |
|-----------|---------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| Home      | The home page of Scrimsight, showing an overview of everything with modules linking out to other pages. | Files, matches, teams, players                                                                    |
| Files     | Lets users add and manage files to be analyzed.                                                         | Add from directory, add files directly, view and manage files                                     |
| Teams     | Shows all of the teams and aggregate stats about them.                                                  | Team name, record, all players                                                                    |
| Team      | Shows info about a specific team                                                                        | Team name, record and match history, all players by role, compositions played                     |
| Matches   | Shows all matches added.                                                                                | Match list, calendar view, search and filter matches                                              |
| Match     | Shows info for a specific match.                                                                        | Match info, map type, teams, score, player stats, match timeline                                  |
| Players   | Shows all players                                                                                       | Player name, win/loss record, teams they're on, top heroes                                        |
| Player    | Info for a specific player.                                                                             | Player name, win/loss record, teams theyre on, matches they're in, heroes they played with stats. |


- **Home:**  
  Provides an overview of Scrimsight with modules linking to every major section—Files, Matches, Teams, and Players.

- **Files:**  
  Enables users to add and manage files for analysis. Users can add files via directory selection or direct upload, and then view/manage them.

- **Teams:**  
  Displays all teams along with aggregate statistics (such as team names, records, and the list of players).

- **Team:**  
  Focuses on a specific team by showing detailed information including team name, record, match history, players (segmented by role), and the compositions they played.

- **Matches:**  
  Lists all matches added to the system, incorporating features like a calendar view and options to search/filter matches.

- **Match:**  
  Provides in-depth information for a specific match, including match details (like map type, scores, timeline), teams involved, and player statistics.

- **Players:**  
  Lists every player with summary data including name, win/loss record, team affiliations, and top played heroes.

- **Player:**  
  Offers detailed insights into a specific player such as win/loss record, associated teams, the matches they participated in, and their hero performance statistics.

---

### Updated Data Display and Visualization Guidelines

To create the best visualizations and page layouts in Scrimsight, follow these detailed guidelines:

1. **Consistent Style and Theming:**
   - **Use Material-UI Components:** Leverage Material-UI’s pre-built components to ensure consistent spacing, typography, and colors.
   - **Enforce a Common Theme:** Utilize the Material-UI theme settings to maintain consistency in colors and font styles throughout the app.

2. **Appropriate Charting:**
   - **Utilize Recharts:** Use Recharts exclusively for rendering charts to ensure interactivity and a uniform look.
   - **Fixed-Width for Values:** Render numerical data in a fixed-width font for better alignment, while keeping labels in a standard font.
   - **Incorporate legends, tooltips, and clear axis labels:** so users understand what each part of the chart represents.  
   - **Break down complex visualizations (such as multi-tabbed dashboards) into smaller, manageable components that can be reused across pages.**

3. **Clear Contextualization:**
   - **Accompanying Data Tables:** Always provide a data table (either underneath or adjacent to charts) so users can see the exact numbers being visualized.
   - **Include Descriptive Elements:** Add clear titles, legends, and tooltips to charts to provide context and enhance clarity.

4. **Effective Data Breakdown:**
   - **Multiple or Layered Charts:** When displaying complex data, use multiple charts or layered (e.g., stacked bar) charts to break data into digestible segments.
   - **Drill-Down Capabilities:** Enable users to click or hover for more detailed information when necessary.

5. **Responsive Design and Layout:**
   - **Adaptive Layouts:** Use Material-UI’s grid system and responsive design patterns to ensure visualizations and layouts adapt seamlessly across desktop, tablet, and mobile devices.
   - **Logical Grouping:** Organize charts and tables in logical groups so that related elements are visually associated, enhancing user comprehension.

6. **Interactive and Engaging Visuals:**
   - **User Interactions:** Incorporate interactivity such as hover effects, clickable elements, and dynamic tooltips to keep users engaged.
   - **Performance Considerations:** Ensure that added interactivity does not compromise performance, especially with large datasets.

7. **Clarity and Minimalism:**
   - **Avoid Clutter:** Limit the number of data series in each chart and focus on the most relevant metrics to avoid overwhelming the user.
   - **Clear Labels:** Use straightforward, legible labels and legends. Avoid overly technical language unless absolutely necessary.

8. **Accessibility:**
   - **High Contrast and Readability:** Follow best practices for color contrast and text size to ensure visualizations are accessible to all users.
   - **Alternative Text:** Provide descriptive alternative text or ARIA labels for all charts and non-text elements.

9. **Documentation & Code Modularity:**
   - **Component Documentation:** Clearly document each visualization component and its purpose, inputs, and expected outputs.
   - **Separation of Concerns:** Keep all data processing within atoms and let the components focus solely on presentation to ensure easier maintenance and reusability.

10. **Testing and Iteration:**
    - **Cross-Platform Testing:** Regularly test visualizations on various devices and browsers to ensure consistency.
    - **Iterative Improvements:** Collect user feedback on the visualizations and iterate on designs for clarity, usability, and enhanced visual appeal.

Below is an expanded section that explains when to use each Recharts chart type in your visualizations. This section is designed to complement the existing visualization guidelines for Scrimsight. Please review and let me know if this meets your expectations.

---

## Recharts Chart Type Guidelines

When choosing a chart type from Recharts, consider the underlying data and the message you want to convey. Here’s a rundown of the most common chart types available in Recharts along with recommendations for their use:

1. **Bar Chart**  
   - **When to Use:**  
     - To compare discrete values across different categories (e.g., team statistics, individual player performance metrics).
     - To display rankings or differences in quantity between groups.
   - **Example Use Cases:**  
     - Comparing the win/loss record of teams.
     - Displaying the performance metrics (e.g., damage, healing) of players side by side.

2. **Line Chart**  
   - **When to Use:**  
     - For continuous data and to show trends over time.
     - When you want to highlight the evolution or progression of data points (e.g., match timelines, performance trends during a game).
   - **Example Use Cases:**  
     - Plotting score progression during a match.
     - Visualizing changes in a player’s metrics over a series of games.

3. **Area Chart**  
   - **When to Use:**  
     - Similar to a line chart, but also emphasizing volume or magnitude beneath the trend line.
     - To display cumulative data, which can highlight the total impact over time.
   - **Example Use Cases:**  
     - Visualizing the cumulative win rate as more matches are played.

4. **Pie Chart**  
   - **When to Use:**  
     - To present parts of a whole when there are relatively few categories.
     - When the focus is on proportion rather than exact values.
   - **Example Use Cases:**  
     - Displaying the percentage breakdown of hero usage.
     - Showing the distribution of player roles within a team.

5. **Radar Chart (Spider Chart)**  
   - **When to Use:**  
     - To compare several quantitative variables across multiple entities (e.g., players or teams) on a common scale.
     - When you need to visualize performance metrics that have multiple dimensions in one compact form.
   - **Example Use Cases:**  
     - Comparing players’ performance across various metrics like eliminations, damage, healing, and accuracy.
     - Visualizing team strengths and weaknesses from different angles.

6. **Scatter Chart**  
   - **When to Use:**  
     - For showcasing relationships or correlations between two continuous variables.
     - When analyzing distributions and potential clustering in the data.
   - **Example Use Cases:**  
     - Plotting the relationship between damage dealt and damage taken by players.
     - Correlating the match duration with the final score difference.

7. **Composed Chart**  
   - **When to Use:**  
     - When you need to combine different chart types (e.g., a bar chart with a line overlay) in a single visualization.
     - When multiple data representations improve clarity, such as contrasting individual statistics with overall trends.
   - **Example Use Cases:**  
     - Displaying a line chart showing momentum overlaid with bars representing specific events in a match.
     - Mixing bar and line plots to compare individual contributions against overall team trends.

8. **Radial Bar Chart**  
   - **When to Use:**  
     - To display data in a circular format, which can be effective for progress indicators or to emphasize percentages.
     - When you want a visual that stands apart from traditional bar or pie charts.
   - **Example Use Cases:**  
     - Showing overall progress toward a target (e.g., season win rate, goal completion).
     - Presenting cyclical or periodic data in a visually engaging way.

Citation: Rougier NP, Droettboom M, Bourne PE (2014) Ten Simple Rules for Better Figures. PLoS Comput Biol 10(9): e1003833. https://doi.org/10.1371/journal.pcbi.1003833

Published: September 11, 2014

This is an open-access article, free of all copyright, and may be freely reproduced, distributed, transmitted, modified, built upon, or otherwise used by anyone for any lawful purpose. The work is made available under the Creative Commons CC0 public domain dedication.

Funding: The authors received no specific funding for this article.

Competing interests: The authors have declared that no competing interests exist.

Scientific visualization is classically defined as the process of graphically displaying scientific data. However, this process is far from direct or automatic. There are so many different ways to represent the same data: scatter plots, linear plots, bar plots, and pie charts, to name just a few. Furthermore, the same data, using the same type of plot, may be perceived very differently depending on who is looking at the figure. A more accurate definition for scientific visualization would be a graphical interface between people and data. In this short article, we do not pretend to explain everything about this interface; rather, see [1], [2] for introductory work. Instead we aim to provide a basic set of rules to improve figure design and to explain some of the common pitfalls.
Rule 1: Know Your Audience

Given the definition above, problems arise when how a visual is perceived differs significantly from the intent of the conveyer. Consequently, it is important to identify, as early as possible in the design process, the audience and the message the visual is to convey. The graphical design of the visual should be informed by this intent. If you are making a figure for yourself and your direct collaborators, you can possibly skip a number of steps in the design process, because each of you knows what the figure is about. However, if you intend to publish a figure in a scientific journal, you should make sure your figure is correct and conveys all the relevant information to a broader audience. Student audiences require special care since the goal for that situation is to explain a concept. In that case, you may have to add extra information to make sure the concept is fully understood. Finally, the general public may be the most difficult audience of all since you need to design a simple, possibly approximated, figure that reveals only the most salient part of your research (Figure 1). This has proven to be a difficult exercise [3].

Figure 1. Know your audience.

This is a remake of a figure that was originally published in the New York Times (NYT) in 2007. This new figure was made with matplotlib using approximated data. The data is made of four series (men deaths/cases, women deaths/cases) that could have been displayed using classical double column (deaths/cases) bar plots. However, the layout used here is better for the intended audience. It exploits the fact that the number of new cases is always greater than the corresponding number of deaths to mix the two values. It also takes advantage of the reading direction (English [left-to-right] for NYT) in order to ease comparison between men and women while the central labels give an immediate access to the main message of the figure (cancer). This is a self-contained figure that delivers a clear message on cancer deaths. However, it is not precise. The chosen layout makes it actually difficult to estimate the number of kidney cancer deaths because of its bottom position and the location of the labelled ticks at the top. While this is acceptable for a general-audience publication, it would not be acceptable in a scientific publication if actual numerical values were not given elsewhere in the article.

Rule 2: Identify Your Message

A figure is meant to express an idea or introduce some facts or a result that would be too long (or nearly impossible) to explain only with words, be it for an article or during a time-limited oral presentation. In this context, it is important to clearly identify the role of the figure, i.e., what is the underlying message and how can a figure best express this message? Once clearly identified, this message will be a strong guide for the design of the figure, as shown in Figure 2. Only after identifying the message will it be worth the time to develop your figure, just as you would take the time to craft your words and sentences when writing an article only after deciding on the main points of the text. If your figure is able to convey a striking message at first glance, chances are increased that your article will draw more attention from the community.


Figure 2. Identify your message.

The superior colliculus (SC) is a brainstem structure at the crossroads of multiple functional pathways. Several neurophysiological studies suggest that the population of active neurons in the SC encodes the location of a visual target that induces saccadic eye movement. The projection from the retina surface (on the left) to the collicular surface (on the right) is based on a standard and quantitative model in which a logarithmic mapping function ensures the projection from retinal coordinates to collicular coordinates. This logarithmic mapping plays a major role in saccade decision. To better illustrate this role, an artificial checkerboard pattern has been used, even though such a pattern is not used during experiments. This checkerboard pattern clearly demonstrates the extreme magnification of the foveal region, which is the main message of the figure.

Rule 4: Captions Are Not Optional

Whether describing an experimental setup, introducing a new model, or presenting new results, you cannot explain everything within the figure itself—a figure should be accompanied by a caption. The caption explains how to read the figure and provides additional precision for what cannot be graphically represented. This can be thought of as the explanation you would give during an oral presentation, or in front of a poster, but with the difference that you must think in advance about the questions people would ask. For example, if you have a bar plot, do not expect the reader to guess the value of the different bars by just looking and measuring relative heights on the figure. If the numeric values are important, they must be provided elsewhere in your article or be written very clearly on the figure. Similarly, if there is a point of interest in the figure (critical domain, specific point, etc.), make sure it is visually distinct but do not hesitate to point it out again in the caption.
Rule 5: Do Not Trust the Defaults

Any plotting library or software comes with a set of default settings. When the end-user does not specify anything, these default settings are used to specify size, font, colors, styles, ticks, markers, etc. (Figure 4). Virtually any setting can be specified, and you can usually recognize the specific style of each software package (Matlab, Excel, Keynote, etc.) or library (LaTeX, matplotlib, gnuplot, etc.) thanks to the choice of these default settings. Since these settings are to be used for virtually any type of plot, they are not fine-tuned for a specific type of plot. In other words, they are good enough for any plot but they are best for none. All plots require at least some manual tuning of the different settings to better express the message, be it for making a precise plot more salient to a broad audience, or to choose the best colormap for the nature of the data. For example, see [4] for how to go from the default settings to a nicer visual in the case of the matplotlib library.

Figure 4. Do not trust the defaults.

The left panel shows the sine and cosine functions as rendered by matplotlib using default settings. While this figure is clear enough, it can be visually improved by tweaking the various available settings, as shown on the right panel.

Rule 6: Use Color Effectively

Color is an important dimension in human vision and is consequently equally important in the design of a scientific figure. However, as explained by Edward Tufte [1], color can be either your greatest ally or your worst enemy if not used properly. If you decide to use color, you should consider which colors to use and where to use them. For example, to highlight some element of a figure, you can use color for this element while keeping other elements gray or black. This provides an enhancing effect. However, if you have no such need, you need to ask yourself, “Is there any reason this plot is blue and not black?” If you don't know the answer, just keep it black. The same holds true for colormaps. Do not use the default colormap (e.g., jet or rainbow) unless there is an explicit reason to do so (see Figure 5 and [5]). Colormaps are traditionally classified into three main categories:

Figure 5. Use color effectively.

This figure represents the same signal, whose frequency increases to the right and intensity increases towards the bottom, using three different colormaps. The rainbow colormap (qualitative) and the seismic colormap (diverging) are equally bad for such a signal because they tend to hide details in the high frequency domain (bottom-right part). Using a sequential colormap such as the purple one, it is easier to see details in the high frequency domain. Adapted from [5].

    Sequential: one variation of a unique color, used for quantitative data varying from low to high.
    Diverging: variation from one color to another, used to highlight deviation from a median value.
    Qualitative: rapid variation of colors, used mainly for discrete or categorical data.

Use the colormap that is the most relevant to your data. Lastly, avoid using too many similar colors since color blindness may make it difficult to discern some color differences (see [6] for detailed explanation).
Rule 7: Do Not Mislead the Reader

What distinguishes a scientific figure from other graphical artwork is the presence of data that needs to be shown as objectively as possible. A scientific figure is, by definition, tied to the data (be it an experimental setup, a model, or some results) and if you loosen this tie, you may unintentionally project a different message than intended. However, representing results objectively is not always straightforward. For example, a number of implicit choices made by the library or software you're using that are meant to be accurate in most situations may also mislead the viewer under certain circumstances. If your software automatically re-scales values, you might obtain an objective representation of the data (because title, labels, and ticks indicate clearly what is actually displayed) that is nonetheless visually misleading (see bar plot in Figure 6); you have inadvertently misled your readers into visually believing something that does not exist in your data. You can also make explicit choices that are wrong by design, such as using pie charts or 3-D charts to compare quantities. These two kinds of plots are known to induce an incorrect perception of quantities and it requires some expertise to use them properly. As a rule of thumb, make sure to always use the simplest type of plots that can convey your message and make sure to use labels, ticks, title, and the full range of values when relevant. Lastly, do not hesitate to ask colleagues about their interpretation of your figures.

Download:

    PPT
    PowerPoint slide
    PNG
    larger image
    TIFF
    original image

Figure 6. Do not mislead the reader.

On the left part of the figure, we represented a series of four values: 30, 20, 15, 10. On the upper left part, we used the disc area to represent the value, while in the bottom part we used the disc radius. Results are visually very different. In the latter case (red circles), the last value (10) appears very small compared to the first one (30), while the ratio between the two values is only 3∶1. This situation is actually very frequent in the literature because the command (or interface) used to produce circles or scatter plots (with varying point sizes) offers to use the radius as default to specify the disc size. It thus appears logical to use the value for the radius, but this is misleading. On the right part of the figure, we display a series of ten values using the full range for values on the top part (y axis goes from 0 to 100) or a partial range in the bottom part (y axis goes from 80 to 100), and we explicitly did not label the y-axis to enhance the confusion. The visual perception of the two series is totally different. In the top part (black series), we tend to interpret the values as very similar, while in the bottom part, we tend to believe there are significant differences. Even if we had used labels to indicate the actual range, the effect would persist because the bars are the most salient information on these figures.

Rule 8: Avoid “Chartjunk”

Chartjunk refers to all the unnecessary or confusing visual elements found in a figure that do not improve the message (in the best case) or add confusion (in the worst case). For example, chartjunk may include the use of too many colors, too many labels, gratuitously colored backgrounds, useless grid lines, etc. (see left part of Figure 7). The term was first coined by Edward Tutfe in [1], in which he argues that any decorations that do not tell the viewer something new must be banned: “Regardless of the cause, it is all non-data-ink or redundant data-ink, and it is often chartjunk.” Thus, in order to avoid chartjunk, try to save ink, or electrons in the computing era. Stephen Few reminds us in [7] that graphs should ideally “represent all the data that is needed to see and understand what's meaningful.” However, an element that could be considered chartjunk in one figure can be justified in another. For example, the use of a background color in a regular plot is generally a bad idea because it does not bring useful information. However, in the right part of Figure 7, we use a gray background box to indicate the range [−1,+1] as described in the caption. If you're in doubt, do not hesitate to consult the excellent blog of Kaiser Fung [8], which explains quite clearly the concept of chartjunk through the study of many examples.

Figure 7. Avoid chartjunk.

We have seven series of samples that are equally important, and we would like to show them all in order to visually compare them (exact signal values are supposed to be given elsewhere). The left figure demonstrates what is certainly one of the worst possible designs. All the curves cover each other and the different colors (that have been badly and automatically chosen by the software) do not help to distinguish them. The legend box overlaps part of the graphic, making it impossible to check if there is any interesting information in this area. There are far too many ticks: x labels overlap each other, making them unreadable, and the three-digit precision does not seem to carry any significant information. Finally, the grid does not help because (among other criticisms) it is not aligned with the signal, which can be considered discrete given the small number of sample points. The right figure adopts a radically different layout while using the same area on the sheet of paper. Series have been split into seven plots, each of them showing one series, while other series are drawn very lightly behind the main one. Series labels have been put on the left of each plot, avoiding the use of colors and a legend box. The number of x ticks has been reduced to three, and a thin line indicates these three values for all plots. Finally, y ticks have been completely removed and the height of the gray background boxes indicate the [−1,+1] range (this should also be indicated in the figure caption if it were to be used in an article).

Rule 9: Message Trumps Beauty

Figures have been used in scientific literature since antiquity. Over the years, a lot of progress has been made, and each scientific domain has developed its own set of best practices. It is important to know these standards, because they facilitate a more direct comparison between models, studies, or experiments. More importantly, they can help you to spot obvious errors in your results. However, most of the time, you may need to design a brand-new figure, because there is no standard way of describing your research. In such a case, browsing the scientific literature is a good starting point. If some article displays a stunning figure to introduce results similar to yours, you might want to try to adapt the figure for your own needs (note that we did not say copy; be careful with image copyright). If you turn to the web, you have to be very careful, because the frontiers between data visualization, infographics, design, and art are becoming thinner and thinner [9]. There exists a myriad of online graphics in which aesthetic is the first criterion and content comes in second place. Even if a lot of those graphics might be considered beautiful, most of them do not fit the scientific framework. Remember, in science, message and readability of the figure is the most important aspect while beauty is only an option, as dramatically shown in Figure 8.

Figure 8. Message beats beauty.

This figure is an extreme case where the message is particularly clear even if the aesthetic of the figure is questionable. The uncanny valley is a well-known hypothesis in the field of robotics that correlates our comfort level with the human-likeness of a robot. To express this hypothetical nature, hypothetical data were used () and the figure was given a sketched look (xkcd filter on matplotlib) associated with a cartoonish font that enhances the overall effect. Tick labels were also removed since only the overall shape of the curve matters. Using a sketch style conveys to the viewer that the data is approximate, and that it is the higher-level concepts rather than low-level details that are important [10].


Icons

- Prefer `Material-UI` icons; name icons in PascalCase.
- Custom icons in `src/components/Icons`.

TypeScript & Syntax

- Strict mode. Avoid `any`.
- Use optional chaining, union types (no enums).
- Export variables directly, don't use `export default`.

File & Folder Names

- Shared types in `src/lib/types.ts`.
- Sort imports (external → internal → sibling → styles).

Additional

- Keep code short; commits semantic.

IMPORTANT:
- When given a task, always restate the task in your own words, and then ask for confirmation.
- Then, provide a few high level options for how to complete the task, and ask for the best option.
- Search the components folder for existing components that could be used to complete the task. If there is no existing component and it makes sense to use elsewhere, create a new component there.
- Search the atoms folder for existing atoms with data that could be used to complete the task. If there is no existing atom, create a new atom there to compute the data needed.
- Fix linting errors and warnings as you go.
- After all changes are made, ALWAYS build the project with `npm run build`. Ignore warnings, fix errors.