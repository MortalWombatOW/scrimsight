# .cursorrules

Project Overview
- Scrimsight is a web app for analyzing data from Overwatch Scrims. It is built with React, Typescript, and Material-UI. 
- The project is organized into several main folders:
  - `src/components`: Reusable React components
  - `src/atoms`: State management using Jotai
  - `src/pages`: Page components
  - `src/lib`: Utility functions and types

App Structure

- The app is a single page app with a sidebar.
- The sidebar has links to the different pages.
- The main content area is where the page content is displayed.
- Pages



Components & Naming

- Name in PascalCase under `src/components/`.
- Keep them small, typed with interfaces.
- Prioritize readability over brevity.
- Components should have very limited logic, prefer to use atoms and jotai to manage state.
- Components should take as few props as possible, and use atoms to get other data they need that is not passed in props.
- Almost all logic should be in atoms, not in components. Limit components to only the logic needed to render the component, for example, a component that displays a list of items should not have logic for sorting or filtering the list.

Data

- Manage data with Jotai.
- Each atom has its own file in `src/atoms`, in camelCase.
- Subfolder: `/metrics` for atoms using the Metric interface, `/files` for dealing with uploads and parsing files, `/event_extractors` for parsing events from files, `/derived_events` for derived events from the event extractors or other atoms.
- Almost all atoms are async.
- Each atom file has an output interface defined at the top of the file.
- Use highly readable and logical code to implement atoms, don't be afraid to add comments.
- Do the processing directly, don't use alasql or any other library to process data.
- When using an atom, remember to import its type instead of declaring a new interface.

Below is a summary of the pages and an enhanced set of guidelines for Data Display and Visualization.

---

### Pages

| Page name | Description                                                                                             | Page sections                                                                                     |
|-----------|---------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| Home      | The home page of Scrimsight, showing an overview of everything with modules linking out to other pages. | Files, matches, teams, players                                                                    |
| Files     | Lets users add and manage files to be analyzed.                                                         | Add from directory, add files directly, view and manage files                                     |
| Teams     | Shows all of the teams and aggregate stats about them.                                                  | Team name, record, all players                                                                    |
| Team      | Shows info about a specific team                                                                        | Team name, record and match history, all players by role, compositions played                     |
| Matches   | Shows all matches added.                                                                                | Match list, calendar view, search and filter matches                                              |
| Match     | Shows info for a specific match.                                                                        | Match info, map type, teams, score, player stats, match timeline                                  |
| Players   | Shows all players                                                                                       | Player name, win/loss record, teams they're on, top heroes                                        |
| Player    | Info for a specific player.                                                                             | Player name, win/loss record, teams theyre on, matches they're in, heroes they played with stats. |


- **Home:**  
  Provides an overview of Scrimsight with modules linking to every major section—Files, Matches, Teams, and Players.

- **Files:**  
  Enables users to add and manage files for analysis. Users can add files via directory selection or direct upload, and then view/manage them.

- **Teams:**  
  Displays all teams along with aggregate statistics (such as team names, records, and the list of players).

- **Team:**  
  Focuses on a specific team by showing detailed information including team name, record, match history, players (segmented by role), and the compositions they played.

- **Matches:**  
  Lists all matches added to the system, incorporating features like a calendar view and options to search/filter matches.

- **Match:**  
  Provides in-depth information for a specific match, including match details (like map type, scores, timeline), teams involved, and player statistics.

- **Players:**  
  Lists every player with summary data including name, win/loss record, team affiliations, and top played heroes.

- **Player:**  
  Offers detailed insights into a specific player such as win/loss record, associated teams, the matches they participated in, and their hero performance statistics.

---

### Updated Data Display and Visualization Guidelines

To create the best visualizations and page layouts in Scrimsight, follow these detailed guidelines:

1. **Consistent Style and Theming:**
   - **Use Material-UI Components:** Leverage Material-UI’s pre-built components to ensure consistent spacing, typography, and colors.
   - **Enforce a Common Theme:** Utilize the Material-UI theme settings to maintain consistency in colors and font styles throughout the app.

2. **Appropriate Charting:**
   - **Utilize Recharts:** Use Recharts exclusively for rendering charts to ensure interactivity and a uniform look.
   - **Fixed-Width for Values:** Render numerical data in a fixed-width font for better alignment, while keeping labels in a standard font.
   - **Incorporate legends, tooltips, and clear axis labels:** so users understand what each part of the chart represents.  
   - **Break down complex visualizations (such as multi-tabbed dashboards) into smaller, manageable components that can be reused across pages.**

3. **Clear Contextualization:**
   - **Accompanying Data Tables:** Always provide a data table (either underneath or adjacent to charts) so users can see the exact numbers being visualized.
   - **Include Descriptive Elements:** Add clear titles, legends, and tooltips to charts to provide context and enhance clarity.

4. **Effective Data Breakdown:**
   - **Multiple or Layered Charts:** When displaying complex data, use multiple charts or layered (e.g., stacked bar) charts to break data into digestible segments.
   - **Drill-Down Capabilities:** Enable users to click or hover for more detailed information when necessary.

5. **Responsive Design and Layout:**
   - **Adaptive Layouts:** Use Material-UI’s grid system and responsive design patterns to ensure visualizations and layouts adapt seamlessly across desktop, tablet, and mobile devices.
   - **Logical Grouping:** Organize charts and tables in logical groups so that related elements are visually associated, enhancing user comprehension.

6. **Interactive and Engaging Visuals:**
   - **User Interactions:** Incorporate interactivity such as hover effects, clickable elements, and dynamic tooltips to keep users engaged.
   - **Performance Considerations:** Ensure that added interactivity does not compromise performance, especially with large datasets.

7. **Clarity and Minimalism:**
   - **Avoid Clutter:** Limit the number of data series in each chart and focus on the most relevant metrics to avoid overwhelming the user.
   - **Clear Labels:** Use straightforward, legible labels and legends. Avoid overly technical language unless absolutely necessary.

8. **Accessibility:**
   - **High Contrast and Readability:** Follow best practices for color contrast and text size to ensure visualizations are accessible to all users.
   - **Alternative Text:** Provide descriptive alternative text or ARIA labels for all charts and non-text elements.

9. **Documentation & Code Modularity:**
   - **Component Documentation:** Clearly document each visualization component and its purpose, inputs, and expected outputs.
   - **Separation of Concerns:** Keep all data processing within atoms and let the components focus solely on presentation to ensure easier maintenance and reusability.

10. **Testing and Iteration:**
    - **Cross-Platform Testing:** Regularly test visualizations on various devices and browsers to ensure consistency.
    - **Iterative Improvements:** Collect user feedback on the visualizations and iterate on designs for clarity, usability, and enhanced visual appeal.

Below is an expanded section that explains when to use each Recharts chart type in your visualizations. This section is designed to complement the existing visualization guidelines for Scrimsight. Please review and let me know if this meets your expectations.

---

## Recharts Chart Type Guidelines

When choosing a chart type from Recharts, consider the underlying data and the message you want to convey. Here’s a rundown of the most common chart types available in Recharts along with recommendations for their use:

1. **Bar Chart**  
   - **When to Use:**  
     - To compare discrete values across different categories (e.g., team statistics, individual player performance metrics).
     - To display rankings or differences in quantity between groups.
   - **Example Use Cases:**  
     - Comparing the win/loss record of teams.
     - Displaying the performance metrics (e.g., damage, healing) of players side by side.

2. **Line Chart**  
   - **When to Use:**  
     - For continuous data and to show trends over time.
     - When you want to highlight the evolution or progression of data points (e.g., match timelines, performance trends during a game).
   - **Example Use Cases:**  
     - Plotting score progression during a match.
     - Visualizing changes in a player’s metrics over a series of games.

3. **Area Chart**  
   - **When to Use:**  
     - Similar to a line chart, but also emphasizing volume or magnitude beneath the trend line.
     - To display cumulative data, which can highlight the total impact over time.
   - **Example Use Cases:**  
     - Visualizing the cumulative win rate as more matches are played.

4. **Pie Chart**  
   - **When to Use:**  
     - To present parts of a whole when there are relatively few categories.
     - When the focus is on proportion rather than exact values.
   - **Example Use Cases:**  
     - Displaying the percentage breakdown of hero usage.
     - Showing the distribution of player roles within a team.

5. **Radar Chart (Spider Chart)**  
   - **When to Use:**  
     - To compare several quantitative variables across multiple entities (e.g., players or teams) on a common scale.
     - When you need to visualize performance metrics that have multiple dimensions in one compact form.
   - **Example Use Cases:**  
     - Comparing players’ performance across various metrics like eliminations, damage, healing, and accuracy.
     - Visualizing team strengths and weaknesses from different angles.

6. **Scatter Chart**  
   - **When to Use:**  
     - For showcasing relationships or correlations between two continuous variables.
     - When analyzing distributions and potential clustering in the data.
   - **Example Use Cases:**  
     - Plotting the relationship between damage dealt and damage taken by players.
     - Correlating the match duration with the final score difference.

7. **Composed Chart**  
   - **When to Use:**  
     - When you need to combine different chart types (e.g., a bar chart with a line overlay) in a single visualization.
     - When multiple data representations improve clarity, such as contrasting individual statistics with overall trends.
   - **Example Use Cases:**  
     - Displaying a line chart showing momentum overlaid with bars representing specific events in a match.
     - Mixing bar and line plots to compare individual contributions against overall team trends.

8. **Radial Bar Chart**  
   - **When to Use:**  
     - To display data in a circular format, which can be effective for progress indicators or to emphasize percentages.
     - When you want a visual that stands apart from traditional bar or pie charts.
   - **Example Use Cases:**  
     - Showing overall progress toward a target (e.g., season win rate, goal completion).
     - Presenting cyclical or periodic data in a visually engaging way.

Icons

- Prefer `Material-UI` icons; name icons in PascalCase.
- Custom icons in `src/components/Icons`.

TypeScript & Syntax

- Strict mode. Avoid `any`.
- Use optional chaining, union types (no enums).
- Export variables directly, don't use `export default`.

File & Folder Names

- Shared types in `src/lib/types.ts`.
- Sort imports (external → internal → sibling → styles).

Additional

- Keep code short; commits semantic.

IMPORTANT:
- When given a task, always restate the task in your own words, and then ask for confirmation.
- Then, provide a few high level options for how to complete the task, and ask for the best option.
- Search the components folder for existing components that could be used to complete the task. If there is no existing component and it makes sense to use elsewhere, create a new component there.
- Search the atoms folder for existing atoms with data that could be used to complete the task. If there is no existing atom, create a new atom there to compute the data needed.
- Fix linting errors and warnings as you go.
- After all changes are made, ALWAYS build the project with `npm run build`. Ignore warnings, fix errors.