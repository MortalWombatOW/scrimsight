# .cursorrules

Project Overview
- Scrimsight is a web app for analyzing data from Overwatch Scrims. It is built with React, Typescript, and Material-UI. 
- The project is organized into several main folders:
  - `src/components`: Reusable React components
  - `src/atoms`: State management using Jotai
  - `src/pages`: Page components
  - `src/lib`: Utility functions and types

App Structure

- The app is a single page app with a sidebar.
- The sidebar has links to the different pages.
- The main content area is where the page content is displayed.
- Pages
| Page name | Description                                                                                             | Page sections                                                                                     |
|-----------|---------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|
| Home      | The home page of Scrimsight, showing an overview of everything with modules linking out to other pages. | Files, matches, teams, players                                                                    |
| Files     | Lets users add and manage files to be analyzed.                                                         | Add from directory, add files directly, view and manage files                                     |
| Teams     | Shows all of the teams and aggregate stats about them.                                                  | Team name, record, all players                                                                    |
| Team      | Shows info about a specific team                                                                        | Team name, record and match history, all players by role, compositions played                     |
| Matches   | Shows all matches added.                                                                                | Match list, calendar view, search and filter matches                                              |
| Match     | Shows info for a specific match.                                                                        | Match info, map type, teams, score, player stats, match timeline                                  |
| Players   | Shows all players                                                                                       | Player name, win/loss record, teams they're on, top heroes                                        |
| Player    | Info for a specific player.                                                                             | Player name, win/loss record, teams theyre on, matches they're in, heroes they played with stats. |



Components & Naming

- Name in PascalCase under `src/components/`.
- Keep them small, typed with interfaces.
- Prioritize readability over brevity.
- Components should have very limited logic, prefer to use atoms and jotai to manage state.
- Components should take as few props as possible, and use atoms to get other data they need that is not passed in props.

Data

- Manage data with Jotai.
- Each atom has its own file in `src/atoms`, in camelCase.
- Subfolder: `/metrics` for atoms using the Metric interface, `/files` for dealing with uploads and parsing files, `/event_extractors` for parsing events from files, `/derived_events` for derived events from the event extractors or other atoms.
- Almost all atoms are async.
- Each atom file has an output interface defined at the top of the file.
- Use highly readable and logical code to implement atoms, don't be afraid to add comments.
- Do the processing directly, don't use alasql or any other library to process data.
- When using an atom, remember to import its type instead of declaring a new interface.

Data Display and Visualization

- Use `Material-UI` components for data display and visualization.
- Use `recharts` for charts.
- Render values in a fixed width font, and labels in a normal font.
- Always contextualize charts by also providing the data that is being shown in a table underneath or to the side of the chart.
- Show breakdowns by using multiple charts where possible.

Icons

- Prefer `Material-UI` icons; name icons in PascalCase.
- Custom icons in `src/components/Icons`.

TypeScript & Syntax

- Strict mode. Avoid `any`.
- Use optional chaining, union types (no enums).
- Export variables directly, don't use `export default`.

File & Folder Names

- Shared types in `src/lib/types.ts`.
- Sort imports (external → internal → sibling → styles).

Additional

- Keep code short; commits semantic.

IMPORTANT:
- When given a task, always restate the task in your own words, and then ask for confirmation.
- Then, provide a few high level options for how to complete the task, and ask for the best option.
- Search the components folder for existing components that could be used to complete the task. If there is no existing component and it makes sense to use elsewhere, create a new component there.
- Search the atoms folder for existing atoms with data that could be used to complete the task. If there is no existing atom, create a new atom there to compute the data needed.
- Fix linting errors and warnings as you go.
- After all changes are made, ALWAYS build the project with `npm run build`. Ignore warnings, fix errors.